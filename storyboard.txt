This is the story board for the producer/consumer video.

    // @ no shiny text with no entry sign
    
    // @ title showing github code (Distributed producer/consumer solely with WildFly 9)
    
    This demo shows a solution to a needle in a haystack problem.  A "haystack" of many text phrases
    contains several phrases that are "needles" to be found.  The needles are to be found are provided as
    b-crypt hashes.
    
    // show haystack2 in github
    
    As a quick example, this is a smaller haystack for a quick test, just a text file with phrases.
    
    // show hashes2 in github
    
    This is the corresponding smaller subset of needles for the quick test: b crypt hashes, one per line.

    // show component diagram
    
    The main objective is to make a simple JMS based solution on top of J Boss WildFly leveraging its Hornet Q.
    
    Four J Boss WildFly instances on four separate virtualized Red Hat guests are used.  These guests are on somewhat low powered personal 
    host P Cs, but workable enough for a demo. 

    The red component is the "producer".
    
    The solution has one producer throwing batches of phrases... the hay...     
  
    // pane to show red, beige, blue, green SSH sessions side by side
   
    // start running producer and zoom onto red running producer

    along with all the hashed needles,  onto a queue.  

    The Hornet Q runs in the "producer"... hence red... V M and J V Machine
    
    // pane to show component diagram
    
    The beige, blue, green, are the "consumers", running in their own J Boss WildFly V Ms
    
    // pane to show red, beige, blue, green SSH sessions side by side

    // start running consumer and zoom onto beige running consumer
    
    This multitude of worker consumers pulls each batch off the queue and tries to find the needles
    in the haystack.  Found matches are reported back to the producer.
    
    // zoom out
    
    This is a simple, elegant, pragmatic solution for a shop already using WildFly.  No unnecessary tooling complexity added.  
    
    // back to component diagram
        
    This solution is easily deployed and scaled out using nothing else than J Boss: WildFly 9 in this case.  Beyond what I've
    done here, the workers can be easily enough thrown into the cloud on top of any I a a S provider.
    
    Take note that the red V M also has a message bean for the backchannel.  As the consumers find matches they report back
    to the producer via the backchannel.  There are two queues in this solution.
    
    // @ JMS console, zoom IP
    
    As mentioned, the setup is glued together via J M S on top of Hornet Q running on the producer instance.  We're just using Hornet Q as it comes out of the box shipped with WildFly.
    
    I will be coming back to this WildFly J M S console as we go along.
    
    // @ zoom red putty
    
    As I was introducing the setup I actually ran the smaller subset of the haystack problem and we have the results on the red producer console.

    We see that the needles were found.
    
    // on red ls /opt/../deployments
    
    Let's talk deployment and code.
    
    The producer and the consumers are deployed via simple JARs.  As soon as the producer JAR is deployed it starts producing
    the haystack and needles onto the queue.

    // @ intellij pom.xml
    
    The producer and consumer are simple Maven projects packeged into their separate jars.

    // @ intellij w/ CDI annotations for Singleton etc.
    // zoom @Startup annotation
    
    Java E E... C D I... makes sure the producer starts working as soon as deployed.  
    
    // zoom @PostConstruct annotation in Haystack.scala
    
    As soon as deployed.
    
    // scroll to file read
    
    The hashes dot txt and haystack dot txt files are read
    
    // scroll to while loop
    
    and pushed onto the queue for consumers
    
    // show queueUp(-1,...)
    
    the last message queued is a terminator of sorts, then the queue is closed by the producer
    
    // show queueOpen method
    
    Regular java x j m s a p is are used.
    
    The code is written in scala, as I'm trying to dip my toes in it, but the solution has absolutely nothing to do with scala, it's a java solution with java backed a p is.

    // zoom into NeedleFinder.scala on import of java.util.Map etc...
    
    I'm even using java based collections.
    
    // start with Haystack.scal at top and slowly PGDOWN then switch to NeedleFinder.scala and slowly PGDOWN
    
    Regardless i think it demonstrates the point that scala can be mixed in and remain somewhat readable and maintainable:  at least until scala zealots get at it.
    
    // @ intellij message beans in consumer
    
    // zoom in / highlight @MessageDriven in consumer
    
    As mentioned J M S is the main driver here.
    
    Java E E... J M S... annotations in the consumers ensure they're eager to work as soon as deployed.
     
    // @ intellij message bean in producer
    
    Here the producer also registers for the "backchannel" messages to find out when needles are found by the consumers.
    
    // zoom out to 4 ssh
    
    let's get to the main demo
    
    // alt tab to c:\tmp
    
    I have my JARs compiled and ready to be deployed by simply throwing them into their respective WildFly standalone deployments folders, and start the run
    
    // show haystack.txt with small # lines and zoom to line #
    
    we already saw the small test run with only a handful of hay in the haystack
    
    // show haystack.txt with million lines and zoom to line #
    
    the main run will be against a million phrases.  Although I do batch several thousand lines per message to diminish the communication overhead between the V Ms.  I've somewhat tuned the number of phrases per work unit beforehand.
    
    
    
    // no scaling needed?  do it on single instance: red
    
    // scaling needed, distribute.


